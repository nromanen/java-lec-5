import React, { useState } from 'react';
import { ChevronRight, ChevronLeft } from 'lucide-react';

const IntegrationPresentation = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const slides = [
    {
      title: "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–µ–º",
      subtitle: "Generics + Collections + Functional Interface —Ä–∞–∑–æ–º",
      content: (
        <div className="space-y-8">
          <div className="text-center">
            <div className="text-6xl mb-4">üîó</div>
            <h2 className="text-4xl font-bold text-indigo-600 mb-4">–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏</h2>
            <p className="text-xl text-gray-600">–Ø–∫ –≤—Å—ñ —Ç—Ä–∏ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º</p>
          </div>
          
          <div className="bg-indigo-50 p-6 rounded-lg border-l-4 border-indigo-500">
            <p className="text-lg text-gray-700">
              Generics –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å —Ç–∏–ø–æ–±–µ–∑–ø–µ–∫—É, Collections –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –¥–∞–Ω—ñ, 
              –∞ Functional Interface –¥–æ–∑–≤–æ–ª—è—é—Ç—å –µ–ª–µ–≥–∞–Ω—Ç–Ω–æ —ó—Ö –æ–±—Ä–æ–±–ª—è—Ç–∏.
            </p>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg text-center">
              <div className="text-3xl mb-2">üî∑</div>
              <p className="font-semibold">Generics</p>
              <p className="text-xs text-gray-600">–¢–∏–ø–æ–±–µ–∑–ø–µ–∫–∞</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg text-center">
              <div className="text-3xl mb-2">üì¶</div>
              <p className="font-semibold">Collections</p>
              <p className="text-xs text-gray-600">–°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö</p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg text-center">
              <div className="text-3xl mb-2">‚ö°</div>
              <p className="font-semibold">Functional Interface</p>
              <p className="text-xs text-gray-600">–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö</p>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ Comparator",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-4 rounded-lg">
            <h3 className="text-2xl font-bold">Comparator - Functional Interface –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</h3>
          </div>

          <div className="bg-blue-50 p-5 rounded-lg border-l-4 border-blue-500">
            <h4 className="font-bold text-blue-700 mb-3">–ë–∞–∑–æ–≤–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>List&lt;String&gt; names = new ArrayList&lt;&gt;();</div>
              <div>names.add("John");</div>
              <div>names.add("Alice");</div>
              <div>names.add("Bob");</div>
              <div className="mt-3 text-blue-600">{'// –ü—Ä–∏—Ä–æ–¥–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º)'}</div>
              <div>names.sort((a, b) -&gt; a.compareTo(b));</div>
              <div>names.sort(String::compareTo);</div>
              <div>names.sort(Comparator.naturalOrder());</div>
              <div className="text-gray-500">{'// [Alice, Bob, John]'}</div>
              <div className="mt-3 text-blue-600">{'// –ó–≤–æ—Ä–æ—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'}</div>
              <div>names.sort(Comparator.reverseOrder());</div>
              <div className="text-gray-500">{'// [John, Bob, Alice]'}</div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-green-50 p-5 rounded-lg">
              <h4 className="font-bold text-green-700 mb-3">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>class User &#123;</div>
                <div className="ml-4">private String name;</div>
                <div className="ml-4">private int age;</div>
                <div className="ml-4">{'// getters, constructor'}</div>
                <div>&#125;</div>
                <div className="mt-3">List&lt;User&gt; users = Arrays.asList(</div>
                <div className="ml-4">new User("John", 25),</div>
                <div className="ml-4">new User("Alice", 30),</div>
                <div className="ml-4">new User("Bob", 20)</div>
                <div>);</div>
                <div className="mt-3 text-blue-600">{'// –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≤—ñ–∫–æ–º'}</div>
                <div>users.sort(Comparator.comparing(</div>
                <div className="ml-4">User::getAge));</div>
                <div className="mt-3 text-blue-600">{'// –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–º–µ–Ω–µ–º'}</div>
                <div>users.sort(Comparator.comparing(</div>
                <div className="ml-4">User::getName));</div>
              </div>
            </div>

            <div className="bg-purple-50 p-5 rounded-lg">
              <h4 className="font-bold text-purple-700 mb-3">–°–∫–ª–∞–¥–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div className="text-blue-600">{'// –°–ø–æ—á–∞—Ç–∫—É –∑–∞ –≤—ñ–∫–æ–º, –ø–æ—Ç—ñ–º –∑–∞ —ñ–º–µ–Ω–µ–º'}</div>
                <div>users.sort(</div>
                <div className="ml-4">Comparator.comparing(User::getAge)</div>
                <div className="ml-8">.thenComparing(User::getName)</div>
                <div>);</div>
                <div className="mt-3 text-blue-600">{'// –ó–∞ –≤—ñ–∫–æ–º (–∑–≤–æ—Ä–æ—Ç–Ω–µ), –ø–æ—Ç—ñ–º –∑–∞ —ñ–º–µ–Ω–µ–º'}</div>
                <div>users.sort(</div>
                <div className="ml-4">Comparator.comparing(User::getAge)</div>
                <div className="ml-8">.reversed()</div>
                <div className="ml-8">.thenComparing(User::getName)</div>
                <div>);</div>
                <div className="mt-3 text-blue-600">{'// –ó null-safe –æ–±—Ä–æ–±–∫–æ—é'}</div>
                <div>users.sort(Comparator.comparing(</div>
                <div className="ml-4">User::getName,</div>
                <div className="ml-4">Comparator.nullsLast(</div>
                <div className="ml-6">String::compareTo)</div>
                <div>));</div>
              </div>
            </div>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-400">
            <p className="font-semibold text-gray-800">
              üí° Comparator - —Ü–µ Functional Interface –∑ –º–µ—Ç–æ–¥–æ–º compare(). 
              –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Generics –¥–ª—è —Ç–∏–ø–æ–±–µ–∑–ø–µ–∫–∏ —Ç–∞ –ø—Ä–∞—Ü—é—î –∑ Collections.
            </p>
          </div>
        </div>
      )
    },
    {
      title: "forEach() –∑ Consumer",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-green-500 to-emerald-500 text-white p-4 rounded-lg">
            <h3 className="text-2xl font-bold">forEach() - —ñ—Ç–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Consumer</h3>
          </div>

          <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
            <h4 className="font-bold text-green-700 mb-3">–ë–∞–∑–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>List&lt;String&gt; languages = Arrays.asList(</div>
              <div className="ml-4">"Java", "Python", "C++", "JavaScript");</div>
              <div className="mt-3 text-blue-600">{'// –í–∏–≤–µ–¥–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'}</div>
              <div>languages.forEach(lang -&gt; </div>
              <div className="ml-4">System.out.println(lang));</div>
              <div className="mt-3 text-blue-600">{'// –ó method reference'}</div>
              <div>languages.forEach(System.out::println);</div>
              <div className="mt-3 text-blue-600">{'// –ó –æ–±—Ä–æ–±–∫–æ—é'}</div>
              <div>languages.forEach(lang -&gt; &#123;</div>
              <div className="ml-4">String upper = lang.toUpperCase();</div>
              <div className="ml-4">System.out.println("Language: " + upper);</div>
              <div>&#125;);</div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 p-5 rounded-lg">
              <h4 className="font-bold text-blue-700 mb-3">forEach –∑ Map</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>Map&lt;String, Integer&gt; scores = </div>
                <div className="ml-4">new HashMap&lt;&gt;();</div>
                <div>scores.put("Alice", 95);</div>
                <div>scores.put("Bob", 87);</div>
                <div>scores.put("Charlie", 92);</div>
                <div className="mt-3 text-blue-600">{'// BiConsumer –¥–ª—è Map'}</div>
                <div>scores.forEach((name, score) -&gt; </div>
                <div className="ml-4">System.out.println(</div>
                <div className="ml-6">name + ": " + score));</div>
                <div className="mt-3 text-blue-600">{'// –ó —É–º–æ–≤–æ—é'}</div>
                <div>scores.forEach((name, score) -&gt; &#123;</div>
                <div className="ml-4">if (score &gt;= 90) &#123;</div>
                <div className="ml-8">System.out.println(</div>
                <div className="ml-10">name + " - Excellent!");</div>
                <div className="ml-4">&#125;</div>
                <div>&#125;);</div>
              </div>
            </div>

            <div className="bg-purple-50 p-5 rounded-lg">
              <h4 className="font-bold text-purple-700 mb-3">forEach –∑ Set</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>Set&lt;Integer&gt; numbers = </div>
                <div className="ml-4">new HashSet&lt;&gt;(Arrays.asList(</div>
                <div className="ml-6">1, 2, 3, 4, 5));</div>
                <div className="mt-3 text-blue-600">{'// –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞'}</div>
                <div>numbers.forEach(n -&gt; &#123;</div>
                <div className="ml-4">int squared = n * n;</div>
                <div className="ml-4">System.out.println(</div>
                <div className="ml-6">n + " squared = " + squared);</div>
                <div>&#125;);</div>
                <div className="mt-3 text-blue-600">{'// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Consumer'}</div>
                <div>Consumer&lt;Integer&gt; printer = </div>
                <div className="ml-4">n -&gt; System.out.println("Value: " + n);</div>
                <div>numbers.forEach(printer);</div>
              </div>
            </div>
          </div>

          <div className="bg-orange-50 p-5 rounded-lg">
            <h4 className="font-bold text-orange-700 mb-3">–ö–æ–º–ø–æ–∑–∏—Ü—ñ—è Consumer</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>List&lt;String&gt; words = Arrays.asList("hello", "world");</div>
              <div className="mt-2 text-blue-600">{'// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö Consumer'}</div>
              <div>Consumer&lt;String&gt; printOriginal = </div>
              <div className="ml-4">s -&gt; System.out.print(s);</div>
              <div>Consumer&lt;String&gt; printSeparator = </div>
              <div className="ml-4">s -&gt; System.out.print(" -&gt; ");</div>
              <div>Consumer&lt;String&gt; printUpperCase = </div>
              <div className="ml-4">s -&gt; System.out.println(s.toUpperCase());</div>
              <div className="mt-2 text-blue-600">{'// –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è —á–µ—Ä–µ–∑ andThen'}</div>
              <div>Consumer&lt;String&gt; combined = printOriginal</div>
              <div className="ml-4">.andThen(printSeparator)</div>
              <div className="ml-4">.andThen(printUpperCase);</div>
              <div className="mt-2">words.forEach(combined);</div>
              <div className="text-gray-500">{'// –í–∏–≤–µ–¥–µ: hello -&gt; HELLO'}</div>
              <div className="text-gray-500">{'//         world -&gt; WORLD'}</div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "removeIf() –∑ Predicate",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 rounded-lg">
            <h3 className="text-2xl font-bold">removeIf() - —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Predicate</h3>
          </div>

          <div className="bg-orange-50 p-5 rounded-lg border-l-4 border-orange-500">
            <h4 className="font-bold text-orange-700 mb-3">–í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ —É–º–æ–≤–æ—é</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>List&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(</div>
              <div className="ml-4">Arrays.asList(1, -2, 3, -4, 5, -6, 7, -8));</div>
              <div className="mt-3 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —á–∏—Å–ª–∞'}</div>
              <div>numbers.removeIf(n -&gt; n &lt; 0);</div>
              <div>System.out.println(numbers); <span className="text-gray-500">{'// [1, 3, 5, 7]'}</span></div>
              <div className="mt-3 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞'}</div>
              <div>numbers.removeIf(n -&gt; n % 2 == 0);</div>
              <div className="mt-3 text-blue-600">{'// –ó method reference'}</div>
              <div>List&lt;String&gt; words = new ArrayList&lt;&gt;(</div>
              <div className="ml-4">Arrays.asList("", "hello", "", "world", ""));</div>
              <div>words.removeIf(String::isEmpty);</div>
              <div>System.out.println(words); <span className="text-gray-500">{'// [hello, world]'}</span></div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 p-5 rounded-lg">
              <h4 className="font-bold text-blue-700 mb-3">–°–∫–ª–∞–¥–Ω—ñ —É–º–æ–≤–∏</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>List&lt;User&gt; users = getUserList();</div>
                <div className="mt-3 text-blue-600">{'// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è predicates'}</div>
                <div>Predicate&lt;User&gt; isInactive = </div>
                <div className="ml-4">u -&gt; !u.isActive();</div>
                <div>Predicate&lt;User&gt; isOld = </div>
                <div className="ml-4">u -&gt; u.getAge() &gt; 65;</div>
                <div>Predicate&lt;User&gt; hasNoEmail = </div>
                <div className="ml-4">u -&gt; u.getEmail() == null || </div>
                <div className="ml-8">u.getEmail().isEmpty();</div>
                <div className="mt-3 text-blue-600">{'// –ö–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è —É–º–æ–≤'}</div>
                <div>users.removeIf(</div>
                <div className="ml-4">isInactive.and(isOld)</div>
                <div>);</div>
                <div className="mt-3 text-blue-600">{'// –ê–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ —É–º–æ–≤–∞–º–∏'}</div>
                <div>users.removeIf(</div>
                <div className="ml-4">isInactive.or(hasNoEmail)</div>
                <div>);</div>
              </div>
            </div>

            <div className="bg-green-50 p-5 rounded-lg">
              <h4 className="font-bold text-green-700 mb-3">Predicate —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>public class UserService &#123;</div>
                <div className="ml-4">public void cleanupUsers(</div>
                <div className="ml-8">List&lt;User&gt; users,</div>
                <div className="ml-8">Predicate&lt;User&gt; condition) &#123;</div>
                <div className="ml-12">users.removeIf(condition);</div>
                <div className="ml-4">&#125;</div>
                <div>&#125;</div>
                <div className="mt-3 text-blue-600">{'// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'}</div>
                <div>UserService service = new UserService();</div>
                <div>List&lt;User&gt; users = getUserList();</div>
                <div className="mt-2 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö'}</div>
                <div>service.cleanupUsers(users, </div>
                <div className="ml-4">u -&gt; !u.isActive());</div>
                <div className="mt-2 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –±–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏'}</div>
                <div>service.cleanupUsers(users, </div>
                <div className="ml-4">u -&gt; !u.hasSubscription());</div>
              </div>
            </div>
          </div>

          <div className="bg-purple-50 p-5 rounded-lg">
            <h4 className="font-bold text-purple-700 mb-3">–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>class DataCleaner &#123;</div>
              <div className="ml-4">public static void cleanData(</div>
              <div className="ml-8">List&lt;String&gt; data) &#123;</div>
              <div className="ml-12 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ null'}</div>
              <div className="ml-12">data.removeIf(s -&gt; s == null);</div>
              <div className="ml-12 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ'}</div>
              <div className="ml-12">data.removeIf(String::isEmpty);</div>
              <div className="ml-12 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏'}</div>
              <div className="ml-12">data.removeIf(s -&gt; s.trim().isEmpty());</div>
              <div className="ml-12 text-blue-600">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–∑–∞–ª–∏—à–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ)'}</div>
              <div className="ml-12">Set&lt;String&gt; seen = new HashSet&lt;&gt;();</div>
              <div className="ml-12">data.removeIf(s -&gt; !seen.add(s));</div>
              <div className="ml-4">&#125;</div>
              <div>&#125;</div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "replaceAll() –∑ UnaryOperator",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-4 rounded-lg">
            <h3 className="text-2xl font-bold">replaceAll() - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è —á–µ—Ä–µ–∑ UnaryOperator</h3>
          </div>

          <div className="bg-purple-50 p-5 rounded-lg border-l-4 border-purple-500">
            <h4 className="font-bold text-purple-700 mb-3">–ë–∞–∑–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>List&lt;String&gt; words = new ArrayList&lt;&gt;(</div>
              <div className="ml-4">Arrays.asList("java", "python", "javascript"));</div>
              <div className="mt-3 text-blue-600">{'// –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ uppercase'}</div>
              <div>words.replaceAll(s -&gt; s.toUpperCase());</div>
              <div>words.replaceAll(String::toUpperCase);</div>
              <div>System.out.println(words);</div>
              <div className="text-gray-500">{'// [JAVA, PYTHON, JAVASCRIPT]'}</div>
              <div className="mt-3 text-blue-600">{'// –î–æ–¥–∞—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å'}</div>
              <div>words.replaceAll(s -&gt; "Language: " + s);</div>
              <div className="mt-3 text-blue-600">{'// –û–±—Ä—ñ–∑–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏'}</div>
              <div>words.replaceAll(String::trim);</div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 p-5 rounded-lg">
              <h4 className="font-bold text-blue-700 mb-3">–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>List&lt;Integer&gt; numbers = </div>
                <div className="ml-4">new ArrayList&lt;&gt;(Arrays.asList(</div>
                <div className="ml-6">1, 2, 3, 4, 5));</div>
                <div className="mt-3 text-blue-600">{'// –ü—ñ–¥–Ω–µ—Å—Ç–∏ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç—É'}</div>
                <div>numbers.replaceAll(n -&gt; n * n);</div>
                <div className="text-gray-500">{'// [1, 4, 9, 16, 25]'}</div>
                <div className="mt-3 text-blue-600">{'// –ü–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ 10'}</div>
                <div>numbers.replaceAll(n -&gt; n * 10);</div>
                <div className="mt-3 text-blue-600">{'// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UnaryOperator'}</div>
                <div>UnaryOperator&lt;Integer&gt; addTen = </div>
                <div className="ml-4">n -&gt; n + 10;</div>
                <div>numbers.replaceAll(addTen);</div>
                <div className="mt-3 text-blue-600">{'// –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤'}</div>
                <div>UnaryOperator&lt;Integer&gt; double = </div>
                <div className="ml-4">n -&gt; n * 2;</div>
                <div>numbers.replaceAll(</div>
                <div className="ml-4">addTen.andThen(doubleIt));</div>
              </div>
            </div>

            <div className="bg-green-50 p-5 rounded-lg">
              <h4 className="font-bold text-green-700 mb-3">–û–±—Ä–æ–±–∫–∞ –æ–±'—î–∫—Ç—ñ–≤</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>List&lt;User&gt; users = getUserList();</div>
                <div className="mt-3 text-blue-600">{'// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö'}</div>
                <div>users.replaceAll(user -&gt; &#123;</div>
                <div className="ml-4">user.setStatus("VERIFIED");</div>
                <div className="ml-4">return user;</div>
                <div>&#125;);</div>
                <div className="mt-3 text-blue-600">{'// –î–æ–¥–∞—Ç–∏ —Ä–æ–∫–∏ –¥–æ –≤—ñ–∫—É'}</div>
                <div>users.replaceAll(user -&gt; &#123;</div>
                <div className="ml-4">user.setAge(user.getAge() + 1);</div>
                <div className="ml-4">return user;</div>
                <div>&#125;);</div>
                <div className="mt-3 text-blue-600">{'// –ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–º–µ–Ω–∞'}</div>
                <div>users.replaceAll(user -&gt; &#123;</div>
                <div className="ml-4">String normalized = user.getName()</div>
                <div className="ml-8">.trim()</div>
                <div className="ml-8">.toLowerCase();</div>
                <div className="ml-4">user.setName(normalized);</div>
                <div className="ml-4">return user;</div>
                <div>&#125;);</div>
              </div>
            </div>
          </div>

          <div className="bg-orange-50 p-5 rounded-lg">
            <h4 className="font-bold text-orange-700 mb-3">–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>class DataNormalizer &#123;</div>
              <div className="ml-4">public static void normalizeEmails(</div>
              <div className="ml-8">List&lt;String&gt; emails) &#123;</div>
              <div className="ml-12 text-blue-600">{'// –í—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ä–∞–∑–æ–º'}</div>
              <div className="ml-12">emails.replaceAll(email -&gt; email</div>
              <div className="ml-16">.trim() <span className="text-gray-500">{'// –ü—Ä–∏–±—Ä–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏'}</span></div>
              <div className="ml-16">.toLowerCase() <span className="text-gray-500">{'// Lowercase'}</span></div>
              <div className="ml-16">.replaceAll("\\s+", "") <span className="text-gray-500">{'// –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏'}</span></div>
              <div className="ml-12">);</div>
              <div className="ml-4">&#125;</div>
              <div className="mt-2 ml-4">public static void formatPhones(</div>
              <div className="ml-8">List&lt;String&gt; phones) &#123;</div>
              <div className="ml-12">phones.replaceAll(phone -&gt;</div>
              <div className="ml-16">phone.replaceAll("[^0-9]", "")</div>
              <div className="ml-12">);</div>
              <div className="ml-4">&#125;</div>
              <div>&#125;</div>
            </div>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-400">
            <p className="font-semibold text-gray-800">
              üí° UnaryOperator&lt;T&gt; - —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Function&lt;T,T&gt;. 
              –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–ª–∏ –≤—Ö—ñ–¥ —ñ –≤–∏—Ö—ñ–¥ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É.
            </p>
          </div>
        </div>
      )
    },
    {
      title: "–í–ª–∞—Å–Ω—ñ generic –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ FI",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white p-4 rounded-lg">
            <h3 className="text-2xl font-bold">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö generic –∫–ª–∞—Å—ñ–≤</h3>
          </div>

          <div className="bg-indigo-50 p-5 rounded-lg border-l-4 border-indigo-500">
            <h4 className="font-bold text-indigo-700 mb-3">–ü—Ä–∏–∫–ª–∞–¥ 1: Generic Repository –∑ Functional Interface</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>public class Repository&lt;T&gt; &#123;</div>
              <div className="ml-4">private List&lt;T&gt; items = new ArrayList&lt;&gt;();</div>
              <div className="mt-2 ml-4 text-blue-600">{'// –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞'}</div>
              <div className="ml-4">public void add(T item) &#123;</div>
              <div className="ml-8">items.add(item);</div>
              <div className="ml-4">&#125;</div>
              <div className="mt-2 ml-4 text-blue-600">{'// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Predicate'}</div>
              <div className="ml-4">public List&lt;T&gt; findAll(Predicate&lt;T&gt; condition) &#123;</div>
              <div className="ml-8">return items.stream()</div>
              <div className="ml-12">.filter(condition)</div>
              <div className="ml-12">.toList();</div>
              <div className="ml-4">&#125;</div>
              <div className="mt-2 ml-4 text-blue-600">{'// –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —á–µ—Ä–µ–∑ Consumer'}</div>
              <div className="ml-4">public void forEach(Consumer&lt;T&gt; action) &#123;</div>
              <div className="ml-8">items.forEach(action);</div>
              <div className="ml-4">&#125;</div>
              <div className="mt-2 ml-4 text-blue-600">{'// –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Function'}</div>
              <div className="ml-4">public &lt;R&gt; List&lt;R&gt; map(Function&lt;T, R&gt; mapper) &#123;</div>
              <div className="ml-8">return items.stream()</div>
              <div className="ml-12">.map(mapper)</div>
              <div className="ml-12">.toList();</div>
              <div className="ml-4">&#125;</div>
              <div>&#125;</div>
            </div>
          </div>

          <div className="bg-green-50 p-5 rounded-lg">
            <h4 className="font-bold text-green-700 mb-3">–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Repository</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>Repository&lt;User&gt; userRepo = new Repository&lt;&gt;();</div>
              <div>userRepo.add(new User("Alice", 25));</div>
              <div>userRepo.add(new User("Bob", 30));</div>
              <div>userRepo.add(new User("Charlie", 20));</div>
              <div className="mt-3 text-blue-600">{'// –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—Ç–∞—Ä—à–µ 22'}</div>
              <div>List&lt;User&gt; adults = userRepo.findAll(</div>
              <div className="ml-4">u -&gt; u.getAge() &gt; 22</div>
              <div>);</div>
              <div className="mt-3 text-blue-600">{'// –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'}</div>
              <div>userRepo.forEach(</div>
              <div className="ml-4">u -&gt; System.out.println(u.getName())</div>
              <div>);</div>
              <div className="mt-3 text-blue-600">{'// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω'}</div>
              <div>List&lt;String&gt; names = userRepo.map(</div>
              <div className="ml-4">User::getName</div>
              <div>);</div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 p-5 rounded-lg">
              <h4 className="font-bold text-blue-700 mb-3">–ü—Ä–∏–∫–ª–∞–¥ 2: Validator</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>public class Validator&lt;T&gt; &#123;</div>
                <div className="ml-4">private List&lt;Predicate&lt;T&gt;&gt; rules = </div>
                <div className="ml-8">new ArrayList&lt;&gt;();</div>
                <div className="mt-2 ml-4 text-blue-600">{'// –î–æ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ'}</div>
                <div className="ml-4">public Validator&lt;T&gt; addRule(</div>
                <div className="ml-8">Predicate&lt;T&gt; rule) &#123;</div>
                <div className="ml-12">rules.add(rule);</div>
                <div className="ml-12">return this;</div>
                <div className="ml-4">&#125;</div>
                <div className="mt-2 ml-4 text-blue-600">{'// –í–∞–ª—ñ–¥–∞—Ü—ñ—è'}</div>
                <div className="ml-4">public boolean validate(T item) &#123;</div>
                <div className="ml-8">return rules.stream()</div>
                <div className="ml-12">.allMatch(rule -&gt; </div>
                <div className="ml-16">rule.test(item));</div>
                <div className="ml-4">&#125;</div>
                <div>&#125;</div>
              </div>
            </div>

            <div className="bg-purple-50 p-5 rounded-lg">
              <h4 className="font-bold text-purple-700 mb-3">–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Validator</h4>
              <div className="bg-white p-3 rounded font-mono text-xs">
                <div>Validator&lt;User&gt; userValidator = </div>
                <div className="ml-4">new Validator&lt;&gt;()</div>
                <div className="ml-8">.addRule(u -&gt; u.getAge() &gt;= 18)</div>
                <div className="ml-8">.addRule(u -&gt; u.getEmail() != null)</div>
                <div className="ml-8">.addRule(u -&gt; </div>
                <div className="ml-12">u.getName().length() &gt; 2);</div>
                <div className="mt-3">User user = new User("Alice", 25, </div>
                <div className="ml-4">"alice@example.com");</div>
                <div className="mt-2">boolean isValid = </div>
                <div className="ml-4">userValidator.validate(user);</div>
                <div>System.out.println(isValid);</div>
                <div className="text-gray-500">{'// true'}</div>
              </div>
            </div>
          </div>

          <div className="bg-orange-50 p-5 rounded-lg">
            <h4 className="font-bold text-orange-700 mb-3">–ü—Ä–∏–∫–ª–∞–¥ 3: Generic Pipeline</h4>
            <div className="bg-white p-4 rounded font-mono text-xs">
              <div>public class Pipeline&lt;T&gt; &#123;</div>
              <div className="ml-4">private List&lt;Function&lt;T, T&gt;&gt; operations = </div>
              <div className="ml-8">new ArrayList&lt;&gt;();</div>
              <div className="mt-2 ml-4">public Pipeline&lt;T&gt; add(Function&lt;T, T&gt; operation) &#123;</div>
              <div className="ml-8">operations.add(operation);</div>
              <div className="ml-8">return this;</div>
              <div className="ml-4">&#125;</div>
              <div className="mt-2 ml-4">public T execute(T input) &#123;</div>
              <div className="ml-8">T result = input;</div>
              <div className="ml-8">for (Function&lt;T, T&gt; op : operations) &#123;</div>
              <div className="ml-12">result = op.apply(result);</div>
              <div className="ml-8">&#125;</div>
              <div className="ml-8">return result;</div>
              <div className="ml-4">&#125;</div>
              <div>&#125;</div>
              <div className="mt-3 text-blue-600">{'// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'}</div>
              <div>Pipeline&lt;String&gt; textPipeline = new Pipeline&lt;&gt;()</div>
              <div className="ml-4">.add(String::trim)</div>
              <div className="ml-4">.add(String::toLowerCase)</div>
              <div className="ml-4">.add(s -&gt; s.replaceAll("\\s+", " "));</div>
              <div className="mt-2">String result = textPipeline.execute("  Hello   World  ");</div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "–ü—ñ–¥—Å—É–º–æ–∫: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6 rounded-lg">
            <h3 className="text-3xl font-bold mb-4">–í—Å–µ —Ä–∞–∑–æ–º!</h3>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div className="bg-blue-50 p-5 rounded-lg border-l-4 border-blue-500">
              <h4 className="font-bold text-blue-700 mb-3">Generics</h4>
              <ul className="space-y-2 text-sm text-gray-700">
                <li>‚úì List&lt;T&gt;</li>
                <li>‚úì Repository&lt;T&gt;</li>
                <li>‚úì Function&lt;T,R&gt;</li>
                <li>‚úì Predicate&lt;T&gt;</li>
                <li>‚úì –¢–∏–ø–æ–±–µ–∑–ø–µ–∫–∞</li>
              </ul>
            </div>

            <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
              <h4 className="font-bold text-green-700 mb-3">Collections</h4>
              <ul className="space-y-2 text-sm text-gray-700">
                <li>‚úì List, Set, Map</li>
                <li>‚úì ArrayList, HashSet</li>
                <li>‚úì forEach()</li>
                <li>‚úì removeIf()</li>
                <li>‚úì replaceAll()</li>
              </ul>
            </div>

            <div className="bg-purple-50 p-5 rounded-lg border-l-4 border-purple-500">
              <h4 className="font-bold text-purple-700 mb-3">Functional Interface</h4>
              <ul className="space-y-2 text-sm text-gray-700">
                <li>‚úì Consumer</li>
                <li>‚úì Predicate</li>
                <li>‚úì Function</li>
                <li>‚úì UnaryOperator</li>
                <li>‚úì Comparator</li>
              </ul>
            </div>
          </div>

          <div className="bg-yellow-50 p-5 rounded-lg border border-yellow-400">
            <h4 className="font-bold text-yellow-700 mb-3">–û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h4>
            <div className="space-y-2 text-sm text-gray-700">
              <div>üî∏ <strong>–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:</strong> list.sort(Comparator.comparing(...))</div>
              <div>üî∏ <strong>–Ü—Ç–µ—Ä–∞—Ü—ñ—è:</strong> collection.forEach(item -&gt; ...)</div>
              <div>üî∏ <strong>–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è:</strong> collection.removeIf(condition)</div>
              <div>üî∏ <strong>–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è:</strong> list.replaceAll(transformer)</div>
              <div>üî∏ <strong>–í–∞–ª—ñ–¥–∞—Ü—ñ—è:</strong> validator.addRule(predicate)</div>
              <div>üî∏ <strong>–û–±—Ä–æ–±–∫–∞:</strong> repository.forEach(consumer)</div>
            </div>
          </div>

          <div className="bg-indigo-50 p-5 rounded-lg">
            <h4 className="font-bold text-indigo-700 mb-3">–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</h4>
            <ul className="space-y-2 text-gray-700">
              <li>‚úÖ –ö–æ–¥ —Å—Ç–∞—î –∫–æ—Ä–æ—Ç—à–∏–º —Ç–∞ –≤–∏—Ä–∞–∑–Ω—ñ—à–∏–º</li>
              <li>‚úÖ –ú–µ–Ω—à–µ –ø–æ–º–∏–ª–æ–∫ –∑–∞–≤–¥—è–∫–∏ —Ç–∏–ø–æ–±–µ–∑–ø–µ—Ü—ñ</li>
              <li>‚úÖ –õ–µ–≥—à–µ —á–∏—Ç–∞—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏</li>
              <li>‚úÖ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö</li>
              <li>‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ Stream API</li>
            </ul>
          </div>

          <div className="text-center bg-gradient-to-r from-blue-100 to-purple-100 p-6 rounded-lg">
            <p className="text-xl font-bold text-gray-800 mb-2">
              Generics + Collections + Functional Interface =
            </p>
            <p className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              –°—É—á–∞—Å–Ω–∏–π Java –∫–æ–¥! üöÄ
            </p>
          </div>
        </div>
      )
    }
  ];

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="bg-white rounded-2xl shadow-2xl p-12 min-h-[700px] flex flex-col">
          <div className="mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">{slides[currentSlide].title}</h1>
            {slides[currentSlide].subtitle && (
              <p className="text-lg text-gray-600">{slides[currentSlide].subtitle}</p>
            )}
            <div className="h-1 w-32 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 rounded mt-3"></div>
          </div>

          <div className="flex-grow overflow-y-auto">
            {slides[currentSlide].content}
          </div>

          <div className="flex justify-between items-center mt-8 pt-6 border-t">
            <button
              onClick={prevSlide}
              disabled={currentSlide === 0}
              className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-lg hover:from-indigo-600 hover:to-purple-600 disabled:from-gray-300 disabled:to-gray-300 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl"
            >
              <ChevronLeft size={20} />
              –ù–∞–∑–∞–¥
            </button>

            <div className="flex gap-2">
              {slides.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentSlide(index)}
                  className={`h-3 rounded-full transition-all ${
                    index === currentSlide
                      ? 'bg-gradient-to-r from-indigo-500 to-purple-500 w-8'
                      : 'bg-gray-300 hover:bg-gray-400 w-3'
                  }`}
                  title={`–°–ª–∞–π–¥ ${index + 1}`}
                />
              ))}
            </div>

            <button
              onClick={nextSlide}
              disabled={currentSlide === slides.length - 1}
              className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-lg hover:from-indigo-600 hover:to-purple-600 disabled:from-gray-300 disabled:to-gray-300 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl"
            >
              –í–ø–µ—Ä–µ–¥
              <ChevronRight size={20} />
            </button>
          </div>

          <div className="text-center mt-4 text-sm text-gray-500">
            –°–ª–∞–π–¥ {currentSlide + 1} –∑ {slides.length}
          </div>
        </div>
      </div>
    </div>
  );
};

export default IntegrationPresentation;