import React, { useState } from 'react';
import { ChevronRight, ChevronLeft, CheckCircle, XCircle } from 'lucide-react';

const GenericsPresentation = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const slides = [
    {
      title: "Generics (–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è)",
      subtitle: "–¢–∏–ø–æ–±–µ–∑–ø–µ—á–Ω–∏–π –∫–æ–¥ –±–µ–∑ —è–≤–Ω–∏—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω—å",
      content: (
        <div className="space-y-8">
          <div className="text-center">
            <div className="text-6xl mb-4">üî∑</div>
            <h2 className="text-4xl font-bold text-blue-600 mb-4">Java Generics</h2>
            <p className="text-xl text-gray-600">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ç–∞ –≥–Ω—É—á–∫–æ–≥–æ –∫–æ–¥—É</p>
          </div>
          
          <div className="bg-blue-50 p-6 rounded-lg border-l-4 border-blue-500">
            <p className="text-lg text-gray-700">
              <strong>Generics</strong> –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∫–ª–∞—Å–∞–º, —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º —Ç–∞ –º–µ—Ç–æ–¥–∞–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–∏—Ö, 
              –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø–æ–±–µ–∑–ø–µ–∫—É –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó.
            </p>
          </div>
        </div>
      )
    },
    {
      title: "–©–æ —Ç–∞–∫–µ Generics?",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-lg">
            <h3 className="text-2xl font-bold mb-2">–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è</h3>
            <p className="text-lg">–ú–µ—Ö–∞–Ω—ñ–∑–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤, –≤–≤–µ–¥–µ–Ω–∏–π —É Java 5</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
              <h4 className="font-bold text-green-700 mb-3 flex items-center gap-2">
                <CheckCircle size={20} />
                –û—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏
              </h4>
              <ul className="space-y-2 text-gray-700">
                <li>‚úì –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó</li>
                <li>‚úì –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —è–≤–Ω–∏—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω—å —Ç–∏–ø—ñ–≤ (casting)</li>
                <li>‚úì –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–æ–¥</li>
                <li>‚úì –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –¥–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏</li>
              </ul>
            </div>

            <div className="bg-blue-50 p-5 rounded-lg border-l-4 border-blue-500">
              <h4 className="font-bold text-blue-700 mb-3">–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h4>
              <div className="bg-white p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>List&lt;String&gt; list = </div>
                  <div className="ml-4">new ArrayList&lt;&gt;();</div>
                  <div className="mt-2">list.add("Java");</div>
                  <div>String s = list.get(0);</div>
                  <div className="text-green-600 mt-2">{'// –ë–µ–∑ casting!'}</div>
                </code>
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "–ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑ Generics",
      content: (
        <div className="space-y-6">
          <div className="bg-red-50 p-5 rounded-lg border-l-4 border-red-500">
            <h4 className="font-bold text-red-700 mb-3 flex items-center gap-2">
              <XCircle size={20} />
              –î–æ Java 5 (–±–µ–∑ Generics)
            </h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Object –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É'}</div>
                <div>List list = new ArrayList();</div>
                <div>list.add("Hello");</div>
                <div>list.add(123); <span className="text-green-600">{'// –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!'}</span></div>
                <div className="mt-2"></div>
                <div className="text-red-600">{'// –ü–æ—Ç—Ä—ñ–±–µ–Ω —è–≤–Ω–∏–π casting'}</div>
                <div>String s = (String) list.get(0);</div>
                <div className="mt-2"></div>
                <div className="text-red-600">{'// Runtime –ø–æ–º–∏–ª–∫–∞! ClassCastException'}</div>
                <div>String error = (String) list.get(1);</div>
              </code>
            </div>
          </div>

          <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
            <h4 className="font-bold text-green-700 mb-3 flex items-center gap-2">
              <CheckCircle size={20} />
              –ó Generics (Java 5+)
            </h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –¢–∏–ø–æ–±–µ–∑–ø–µ–∫–∞ –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó'}</div>
                <div>List&lt;String&gt; list = new ArrayList&lt;&gt;();</div>
                <div>list.add("Hello");</div>
                <div>list.add(123); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó!'}</span></div>
                <div className="mt-2"></div>
                <div className="text-green-600">{'// –ë–µ–∑ casting'}</div>
                <div>String s = list.get(0);</div>
              </code>
            </div>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-400">
            <p className="text-gray-700 font-semibold">
              üí° –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –∫—Ä–∞—â–µ, –Ω—ñ–∂ Runtime Exception —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ!
            </p>
          </div>
        </div>
      )
    },
    {
      title: "–û—Å–Ω–æ–≤–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: Generic –∫–ª–∞—Å–∏",
      content: (
        <div className="space-y-6">
          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è generic –∫–ª–∞—Å—É</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// T - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø—É (Type parameter)'}</div>
                <div>public class Box&lt;T&gt; {'{'}</div>
                <div className="ml-4">private T content;</div>
                <div className="mt-2 ml-4">public void set(T content) {'{'}</div>
                <div className="ml-8">this.content = content;</div>
                <div className="ml-4">{'}'}</div>
                <div className="mt-2 ml-4">public T get() {'{'}</div>
                <div className="ml-8">return content;</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>

          <div className="bg-green-50 p-5 rounded-lg">
            <h4 className="font-bold text-green-700 mb-3">–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±\'—î–∫—Ç—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏'}</div>
                <div>Box&lt;String&gt; stringBox = new Box&lt;&gt;();</div>
                <div>stringBox.set("Hello");</div>
                <div>String str = stringBox.get(); <span className="text-green-600">{'// –ë–µ–∑ casting'}</span></div>
                <div className="mt-2"></div>
                <div>Box&lt;Integer&gt; intBox = new Box&lt;&gt;();</div>
                <div>intBox.set(123);</div>
                <div>Integer num = intBox.get();</div>
                <div className="mt-2"></div>
                <div>Box&lt;User&gt; userBox = new Box&lt;&gt;();</div>
                <div>userBox.set(new User("John"));</div>
              </code>
            </div>
          </div>

          <div className="bg-purple-50 p-4 rounded-lg">
            <h4 className="font-bold text-purple-700 mb-2">–ö–æ–Ω–≤–µ–Ω—Ü—ñ—ó –Ω–∞–∑–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–∏–ø—É</h4>
            <div className="grid grid-cols-2 gap-3 text-sm">
              <div><strong>T</strong> - Type (–∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø)</div>
              <div><strong>E</strong> - Element (–µ–ª–µ–º–µ–Ω—Ç –∫–æ–ª–µ–∫—Ü—ñ—ó)</div>
              <div><strong>K</strong> - Key (–∫–ª—é—á)</div>
              <div><strong>V</strong> - Value (–∑–Ω–∞—á–µ–Ω–Ω—è)</div>
              <div><strong>N</strong> - Number (—á–∏—Å–ª–æ)</div>
              <div><strong>S, U, V</strong> - –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–∏–ø–∏</div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Generic –º–µ—Ç–æ–¥–∏",
      content: (
        <div className="space-y-6">
          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">–°–∏–Ω—Ç–∞–∫—Å–∏—Å generic –º–µ—Ç–æ–¥—É</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// <T> –ø–µ—Ä–µ–¥ —Ç–∏–ø–æ–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è'}</div>
                <div>public class Utils {'{'}</div>
                <div className="ml-4 mt-2">public static &lt;T&gt; void printArray(T[] array) {'{'}</div>
                <div className="ml-8">for (T element : array) {'{'}</div>
                <div className="ml-12">System.out.println(element);</div>
                <div className="ml-8">{'}'}</div>
                <div className="ml-4">{'}'}</div>
                <div className="mt-2 ml-4">public static &lt;T&gt; T getFirst(List&lt;T&gt; list) {'{'}</div>
                <div className="ml-8">return list.isEmpty() ? null : list.get(0);</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>

          <div className="bg-green-50 p-5 rounded-lg">
            <h4 className="font-bold text-green-700 mb-3">–í–∏–∫–ª–∏–∫ generic –º–µ—Ç–æ–¥—ñ–≤</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É'}</div>
                <div>Integer[] numbers = {'{'}1, 2, 3{'}'};</div>
                <div>Utils.printArray(numbers); <span className="text-green-600">{'// T = Integer'}</span></div>
                <div className="mt-2"></div>
                <div>String[] words = {"{"}"Hello", "World"{"}"};</div>
                <div>Utils.printArray(words); <span className="text-green-600">{'// T = String'}</span></div>
                <div className="mt-2"></div>
                <div className="text-blue-600">{'// –Ø–≤–Ω–µ –≤–∫–∞–∑—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É (—Ä—ñ–¥–∫–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)'}</div>
                <div>Utils.&lt;String&gt;printArray(words);</div>
                <div className="mt-2"></div>
                <div>List&lt;Integer&gt; list = Arrays.asList(1, 2, 3);</div>
                <div>Integer first = Utils.getFirst(list);</div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Generic —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏",
      content: (
        <div className="space-y-6">
          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è generic —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div>public interface Comparable&lt;T&gt; {'{'}</div>
                <div className="ml-4">int compareTo(T other);</div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div>public interface Repository&lt;T, ID&gt; {'{'}</div>
                <div className="ml-4">T findById(ID id);</div>
                <div className="ml-4">void save(T entity);</div>
                <div className="ml-4">void delete(ID id);</div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>

          <div className="bg-green-50 p-5 rounded-lg">
            <h4 className="font-bold text-green-700 mb-3">–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è generic —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –í–∞—Ä—ñ–∞–Ω—Ç 1: –í–∫–∞–∑—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø'}</div>
                <div>public class User implements Comparable&lt;User&gt; {'{'}</div>
                <div className="ml-4">@Override</div>
                <div className="ml-4">public int compareTo(User other) {'{'}</div>
                <div className="ml-8">return this.name.compareTo(other.name);</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// –í–∞—Ä—ñ–∞–Ω—Ç 2: –ó–∞–ª–∏—à–∞—î–º–æ –∫–ª–∞—Å generic'}</div>
                <div>public class UserRepository&lt;T, ID&gt; </div>
                <div className="ml-8">implements Repository&lt;T, ID&gt; {'{'}</div>
                <div className="ml-4">@Override</div>
                <div className="ml-4">public T findById(ID id) {'{'}</div>
                <div className="ml-8">{'// —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è'}</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Bounded Type Parameters",
      content: (
        <div className="space-y-6">
          <div className="bg-purple-50 p-5 rounded-lg border-l-4 border-purple-500">
            <h4 className="font-bold text-purple-700 mb-3">–û–±–º–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ (Upper Bounds)</h4>
            <p className="text-gray-700 mb-3">–î–æ–∑–≤–æ–ª—è—î –æ–±–º–µ–∂–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø—É –ø–µ–≤–Ω–∏–º –∫–ª–∞—Å–æ–º –∞–±–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º</p>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// T –º–∞—î –±—É—Ç–∏ Number –∞–±–æ –π–æ–≥–æ –ø—ñ–¥–∫–ª–∞—Å–æ–º'}</div>
                <div>public class Calculator&lt;T extends Number&gt; {'{'}</div>
                <div className="ml-4">private T value;</div>
                <div className="mt-2 ml-4">public double getDoubleValue() {'{'}</div>
                <div className="ml-8">return value.doubleValue(); <span className="text-green-600">{'// –ú–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ Number'}</span></div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'}</div>
                <div>Calculator&lt;Integer&gt; calc1 = new Calculator&lt;&gt;(); <span className="text-green-600">{'// OK'}</span></div>
                <div>Calculator&lt;Double&gt; calc2 = new Calculator&lt;&gt;(); <span className="text-green-600">{'// OK'}</span></div>
                <div>Calculator&lt;String&gt; calc3 = new Calculator&lt;&gt;(); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
              </code>
            </div>
          </div>

          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">Multiple Bounds (–ú–Ω–æ–∂–∏–Ω–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è)</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// T –º–∞—î —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –æ–±–∏–¥–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏'}</div>
                <div>public class Processor&lt;T extends Runnable & Closeable&gt; {'{'}</div>
                <div className="ml-4">public void process(T item) {'{'}</div>
                <div className="ml-8">item.run(); <span className="text-green-600">{'// –ú–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –æ–±–æ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤'}</span></div>
                <div className="ml-8">item.close();</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// –ö–ª–∞—Å + —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ (–∫–ª–∞—Å –º–∞—î –±—É—Ç–∏ –ø–µ—Ä—à–∏–º!)'}</div>
                <div>public &lt;T extends Number & Comparable&lt;T&gt;&gt; </div>
                <div className="ml-4">T max(T a, T b) {'{'}</div>
                <div className="ml-8">return a.compareTo(b) &gt; 0 ? a : b;</div>
                <div className="ml-4">{'}'}</div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
  title: "Wildcards: Unbounded",
  content: (
    <div className="space-y-6">
      <div className="bg-yellow-50 p-5 rounded-lg border-l-4 border-yellow-500">
        <h4 className="font-bold text-yellow-700 mb-3">Wildcards - —â–æ —Ü–µ?</h4>
        <p className="text-gray-700">
          Wildcards (<code>?</code>) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∫–æ–ª–∏ –º–∏ –Ω–µ –∑–Ω–∞—î–º–æ –∞–±–æ –Ω–µ –≤–∞–∂–ª–∏–≤–æ, —è–∫–∏–π —Å–∞–º–µ —Ç–∏–ø –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
        </p>
      </div>

      <div className="bg-blue-50 p-5 rounded-lg">
        <h4 className="font-bold text-blue-700 mb-3">Unbounded Wildcard: &lt;?&gt;</h4>
        <div className="bg-white p-4 rounded font-mono text-sm">
          <code className="text-gray-800">
            <div className="text-blue-600">{'// –ü—Ä–∏–π–º–∞—î List –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É'}</div>
            <div>public static void printList(List&lt;?&gt; list) {'{'}</div>
            <div className="ml-4">for (Object item : list) {'{'}</div>
            <div className="ml-8">System.out.println(item);</div>
            <div className="ml-4">{'}'}</div>
            <div>{'}'}</div>
            <div className="mt-3"></div>
            <div className="text-blue-600">{'// –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π List'}</div>
            <div>List&lt;String&gt; strings = Arrays.asList("a", "b");</div>
            <div>List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3);</div>
            <div>printList(strings); <span className="text-green-600">{'// OK'}</span></div>
            <div>printList(numbers); <span className="text-green-600">{'// OK'}</span></div>
          </code>
        </div>
      </div>

      <div className="bg-red-50 p-5 rounded-lg">
        <h4 className="font-bold text-red-700 mb-3">–û–±–º–µ–∂–µ–Ω–Ω—è –∑ &lt;?&gt;</h4>
        
        <div className="mb-4">
          <p className="font-semibold text-red-800 mb-2">1. –ù–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ (–∫—Ä—ñ–º null)</p>
          <div className="bg-white p-4 rounded font-mono text-sm">
            <code className="text-gray-800">
              <div>public static void addToList(List&lt;?&gt; list) {'{'}</div>
              <div className="ml-4">list.add("Hello"); <span className="text-red-600">{'// ‚ùå –ü–æ–º–∏–ª–∫–∞!'}</span></div>
              <div className="ml-4">list.add(123); <span className="text-red-600">{'// ‚ùå –ü–æ–º–∏–ª–∫–∞!'}</span></div>
              <div className="ml-4">list.add(null); <span className="text-green-600">{'// ‚úÖ –¢—ñ–ª—å–∫–∏ null'}</span></div>
              <div>{'}'}</div>
            </code>
          </div>
        </div>

        <div className="mb-4">
          <p className="font-semibold text-red-800 mb-2">2. –ß–∏—Ç–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫ Object</p>
          <div className="bg-white p-4 rounded font-mono text-sm">
            <code className="text-gray-800">
              <div>List&lt;?&gt; list = new ArrayList&lt;String&gt;();</div>
              <div>Object item = list.get(0); <span className="text-green-600">{'// ‚úÖ OK'}</span></div>
              <div>String str = list.get(0); <span className="text-red-600">{'// ‚ùå –ü–æ–º–∏–ª–∫–∞!'}</span></div>
            </code>
          </div>
        </div>

        <div className="mb-4">
          <p className="font-semibold text-red-800 mb-2">3. –ù–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä</p>
          <div className="bg-white p-4 rounded font-mono text-sm">
            <code className="text-gray-800">
              <div>List&lt;?&gt; list = new ArrayList&lt;?&gt;(); <span className="text-red-600">{'// ‚ùå'}</span></div>
              <div>List&lt;?&gt; list = new ArrayList&lt;&gt;(); <span className="text-red-600">{'// ‚ùå'}</span></div>
            </code>
          </div>
        </div>

        <div>
          <p className="font-semibold text-red-800 mb-2">4. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è</p>
          <div className="bg-white p-4 rounded font-mono text-sm">
            <code className="text-gray-800">
              <div>void process(List&lt;?&gt; list) {'{'}</div>
              <div className="ml-4">list.size(); <span className="text-green-600">{'// ‚úÖ'}</span></div>
              <div className="ml-4">list.clear(); <span className="text-green-600">{'// ‚úÖ'}</span></div>
              <div className="ml-4">list.isEmpty(); <span className="text-green-600">{'// ‚úÖ'}</span></div>
              <div className="ml-4">list.addAll(other); <span className="text-red-600">{'// ‚ùå'}</span></div>
              <div>{'}'}</div>
            </code>
          </div>
        </div>
      </div>

      <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
        <h4 className="font-bold text-green-700 mb-2">üí° –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ &lt;?&gt;</h4>
        <ul className="text-gray-700 space-y-1 ml-4">
          <li>‚Ä¢ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ</li>
          <li>‚Ä¢ –î–ª—è –º–µ—Ç–æ–¥—ñ–≤, —â–æ –Ω–µ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —Ç–∏–ø—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞</li>
          <li>‚Ä¢ –ö–æ–ª–∏ —Ç–∏–ø –Ω–µ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –ª–æ–≥—ñ–∫–∏ –º–µ—Ç–æ–¥—É</li>
        </ul>
      </div>
    </div>
  )
},
    {
      title: "Wildcards: Upper Bounded",
      content: (
        <div className="space-y-6">
          <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
            <h4 className="font-bold text-green-700 mb-3">Upper Bounded: &lt;? extends Type&gt;</h4>
            <p className="text-gray-700 mb-3">–ü—Ä–∏–π–º–∞—î Type –∞–±–æ –±—É–¥—å-—è–∫–∏–π –π–æ–≥–æ –ø—ñ–¥–∫–ª–∞—Å (Producer - —á–∏—Ç–∞–Ω–Ω—è)</p>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –ü—Ä–∞—Ü—é—î –∑ Number —Ç–∞ –≤—Å—ñ–º–∞ –ø—ñ–¥–∫–ª–∞—Å–∞–º–∏'}</div>
                <div>public static double sum(List&lt;? extends Number&gt; list) {'{'}</div>
                <div className="ml-4">double total = 0;</div>
                <div className="ml-4">for (Number num : list) {'{'}</div>
                <div className="ml-8">total += num.doubleValue();</div>
                <div className="ml-4">{'}'}</div>
                <div className="ml-4">return total;</div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏'}</div>
                <div>List&lt;Integer&gt; integers = Arrays.asList(1, 2, 3);</div>
                <div>List&lt;Double&gt; doubles = Arrays.asList(1.1, 2.2);</div>
                <div>sum(integers); <span className="text-green-600">{'// OK: Integer extends Number'}</span></div>
                <div>sum(doubles); <span className="text-green-600">{'// OK: Double extends Number'}</span></div>
              </code>
            </div>
          </div>

          <div className="bg-red-50 p-5 rounded-lg">
            <h4 className="font-bold text-red-700 mb-3">–û–±–º–µ–∂–µ–Ω–Ω—è: –Ω–µ –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div>public static void addNumbers(</div>
                <div className="ml-8">List&lt;? extends Number&gt; list) {'{'}</div>
                <div className="ml-4">list.add(1); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                <div className="ml-4">list.add(1.5); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                <div className="ml-4">list.add(null); <span className="text-green-600">{'// –¢—ñ–ª—å–∫–∏ null'}</span></div>
                <div>{'}'}</div>
                <div className="mt-2"></div>
                <div className="text-blue-600">{'// –ú–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Ç–∞—Ç–∏'}</div>
                <div>Number num = list.get(0); <span className="text-green-600">{'// OK'}</span></div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Wildcards: Lower Bounded",
      content: (
        <div className="space-y-6">
          <div className="bg-purple-50 p-5 rounded-lg border-l-4 border-purple-500">
            <h4 className="font-bold text-purple-700 mb-3">Lower Bounded: &lt;? super Type&gt;</h4>
            <p className="text-gray-700 mb-3">–ü—Ä–∏–π–º–∞—î Type –∞–±–æ –±—É–¥—å-—è–∫–∏–π –π–æ–≥–æ —Å—É–ø–µ—Ä–∫–ª–∞—Å (Consumer - –∑–∞–ø–∏—Å)</p>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ Integer —Ç–∞ –π–æ–≥–æ –ø—ñ–¥–∫–ª–∞—Å–∏'}</div>
                <div>public static void addIntegers(</div>
                <div className="ml-8">List&lt;? super Integer&gt; list) {'{'}</div>
                <div className="ml-4">list.add(1); <span className="text-green-600">{'// OK'}</span></div>
                <div className="ml-4">list.add(100); <span className="text-green-600">{'// OK'}</span></div>
                <div>{'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ Integer, Number, Object'}</div>
                <div>List&lt;Integer&gt; integers = new ArrayList&lt;&gt;();</div>
                <div>List&lt;Number&gt; numbers = new ArrayList&lt;&gt;();</div>
                <div>List&lt;Object&gt; objects = new ArrayList&lt;&gt;();</div>
                <div className="mt-2"></div>
                <div>addIntegers(integers); <span className="text-green-600">{'// OK'}</span></div>
                <div>addIntegers(numbers); <span className="text-green-600">{'// OK'}</span></div>
                <div>addIntegers(objects); <span className="text-green-600">{'// OK'}</span></div>
              </code>
            </div>
          </div>

          <div className="bg-orange-50 p-5 rounded-lg">
            <h4 className="font-bold text-orange-700 mb-3">–û–±–º–µ–∂–µ–Ω–Ω—è: —á–∏—Ç–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫ Object</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div>public static void process(</div>
                <div className="ml-8">List&lt;? super Integer&gt; list) {'{'}</div>
                <div className="ml-4">Object obj = list.get(0); <span className="text-green-600">{'// –¢—ñ–ª—å–∫–∏ —è–∫ Object'}</span></div>
                <div className="ml-4">Integer num = list.get(0); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "PECS –ø—Ä–∏–Ω—Ü–∏–ø",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-green-500 to-blue-500 text-white p-6 rounded-lg">
            <h3 className="text-3xl font-bold mb-2">PECS Principle</h3>
            <p className="text-xl">Producer Extends, Consumer Super</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
              <h4 className="font-bold text-green-700 mb-3">Producer Extends</h4>
              <p className="text-gray-700 mb-3">–Ø–∫—â–æ –≤–∏ <strong>—á–∏—Ç–∞—î—Ç–µ</strong> –¥–∞–Ω—ñ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó</p>
              <div className="bg-white p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div className="text-blue-600">{'// Producer - –≤—ñ–¥–¥–∞—î –¥–∞–Ω—ñ'}</div>
                  <div>&lt;? extends T&gt;</div>
                  <div className="mt-2"></div>
                  <div>public void copy(</div>
                  <div className="ml-4">List&lt;? extends Number&gt; src,</div>
                  <div className="ml-4">List&lt;Number&gt; dest) {'{'}</div>
                  <div className="ml-6">for (Number n : src) {'{'}</div>
                  <div className="ml-10">dest.add(n);</div>
                  <div className="ml-6">{'}'}</div>
                  <div>{'}'}</div>
                </code>
              </div>
            </div>

            <div className="bg-purple-50 p-5 rounded-lg border-l-4 border-purple-500">
              <h4 className="font-bold text-purple-700 mb-3">Consumer Super</h4>
              <p className="text-gray-700 mb-3">–Ø–∫—â–æ –≤–∏ <strong>–∑–∞–ø–∏—Å—É—î—Ç–µ</strong> –¥–∞–Ω—ñ –≤ –∫–æ–ª–µ–∫—Ü—ñ—é</p>
              <div className="bg-white p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div className="text-blue-600">{'// Consumer - –ø—Ä–∏–π–º–∞—î –¥–∞–Ω—ñ'}</div>
                  <div>&lt;? super T&gt;</div>
                  <div className="mt-2"></div>
                  <div>public void fill(</div>
                  <div className="ml-4">List&lt;? super Integer&gt; list) {'{'}</div>
                  <div className="ml-6">list.add(1);</div>
                  <div className="ml-6">list.add(2);</div>
                  <div>{'}'}</div>
                </code>
              </div>
            </div>
          </div>

          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: Collections.copy()</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –†–µ–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑ Java API'}</div>
                <div>public static &lt;T&gt; void copy(</div>
                <div className="ml-4">List&lt;? super T&gt; dest, <span className="text-purple-600">{'// Consumer - –∑–∞–ø–∏—Å—É—î–º–æ'}</span></div>
                <div className="ml-4">List&lt;? extends T&gt; src <span className="text-green-600">{'// Producer - —á–∏—Ç–∞—î–º–æ'}</span></div>
                <div>) {'{'}</div>
                <div className="ml-4">for (T item : src) {'{'}</div>
                <div className="ml-8">dest.add(item);</div>
                <div className="ml-4">{'}'}</div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-400">
            <p className="text-gray-700 font-semibold">
              üí° –ó–∞–ø–∞–º'—è—Ç–∞–π—Ç–µ: Producer = extends (—á–∏—Ç–∞—î–º–æ), Consumer = super (–ø–∏—à–µ–º–æ)
            </p>
          </div>
        </div>
      )
    },
    {
      title: "Type Erasure",
      content: (
        <div className="space-y-6">
          <div className="bg-orange-50 p-5 rounded-lg border-l-4 border-orange-500">
            <h4 className="font-bold text-orange-700 mb-3">–©–æ —Ç–∞–∫–µ Type Erasure?</h4>
            <p className="text-gray-700">
              –ü—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ generic —Ç–∏–ø–∏ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è (—Å—Ç–∏—Ä–∞—î—Ç—å—Å—è). 
              –¶–µ —Ä–æ–±–∏—Ç—å—Å—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Java –≤–µ—Ä—Å—ñ–π –¥–æ 5.
            </p>
          </div>

          <div className="bg-blue-50 p-5 rounded-lg">
            <h4 className="font-bold text-blue-700 mb-3">–©–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó</h4>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="font-semibold text-gray-700 mb-2">–í–∞—à –∫–æ–¥:</p>
                <div className="bg-white p-3 rounded font-mono text-sm">
                  <code className="text-gray-800">
                    <div>List&lt;String&gt; list = </div>
                    <div className="ml-4">new ArrayList&lt;&gt;();</div>
                    <div>list.add("Hello");</div>
                    <div>String s = list.get(0);</div>
                  </code>
                </div>
              </div>
              <div>
                <p className="font-semibold text-gray-700 mb-2">–ü—ñ—Å–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó:</p>
                <div className="bg-white p-3 rounded font-mono text-sm">
                  <code className="text-gray-800">
                    <div>List list = </div>
                    <div className="ml-4">new ArrayList();</div>
                    <div>list.add("Hello");</div>
                    <div>String s = (String)list.get(0);</div>
                  </code>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-purple-50 p-5 rounded-lg">
            <h4 className="font-bold text-purple-700 mb-3">–ó–∞–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–∏–ø—É</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-blue-600">{'// –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Üí Object'}</div>
                <div>class Box&lt;T&gt; {'{'} T value; {'}'}</div>
                <div className="text-gray-500">‚Üì –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è –≤</div>
                <div>class Box {'{'} Object value; {'}'}</div>
                <div className="mt-3"></div>
                <div className="text-blue-600">{'// Bounded –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Üí –π–æ–≥–æ bound'}</div>
                <div>class Box&lt;T extends Number&gt; {'{'} T value; {'}'}</div>
                <div className="text-gray-500">‚Üì –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è –≤</div>
                <div>class Box {'{'} Number value; {'}'}</div>
              </code>
            </div>
          </div>

          <div className="bg-red-50 p-5 rounded-lg">
            <h4 className="font-bold text-red-700 mb-3">–ù–∞—Å–ª—ñ–¥–∫–∏ Type Erasure</h4>
            <div className="bg-white p-4 rounded font-mono text-sm">
              <code className="text-gray-800">
                <div className="text-red-600">{'// –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –≤ runtime'}</div>
                <div>List&lt;String&gt; list = new ArrayList&lt;&gt;();</div>
                <div>list instanceof List&lt;String&gt; <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó!'}</span></div>
                <div>list instanceof List <span className="text-green-600">{'// OK'}</span></div>
                <div className="mt-2"></div>
                <div className="text-red-600">{'// –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ instance –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø—É'}</div>
                <div>public &lt;T&gt; void create() {'{'}</div>
                <div className="ml-4">T obj = new T(); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                <div>{'}'}</div>
              </code>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "–û–±–º–µ–∂–µ–Ω–Ω—è Generics",
      content: (
        <div className="space-y-6">
          <div className="bg-red-50 p-5 rounded-lg border-l-4 border-red-500">
            <h4 className="font-bold text-red-700 mb-3 flex items-center gap-2">
              <XCircle size={20} />
              –©–æ –ù–ï –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –∑ Generics
            </h4>
          </div>

          <div className="space-y-4">
            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-bold text-gray-800 mb-2">1. –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ primitive types</h5>
              <div className="bg-gray-50 p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>List&lt;int&gt; list; <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                  <div>List&lt;Integer&gt; list; <span className="text-green-600">{'// –ü—Ä–∞–≤–∏–ª—å–Ω–æ'}</span></div>
                </code>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-bold text-gray-800 mb-2">2. –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –º–∞—Å–∏–≤–∏ generic —Ç–∏–ø—ñ–≤</h5>
              <div className="bg-gray-50 p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>List&lt;String&gt;[] array = new List&lt;String&gt;[10]; <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                  <div>List&lt;?&gt;[] array = new List&lt;?&gt;[10]; <span className="text-green-600">{'// OK'}</span></div>
                  <div>List&lt;String&gt;[] array = new ArrayList[10]; <span className="text-green-600">{'// OK (–∑ warning)'}</span></div>
                </code>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-bold text-gray-800 mb-2">3. –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ instance –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø—É</h5>
              <div className="bg-gray-50 p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>public &lt;T&gt; void method() {'{'}</div>
                  <div className="ml-4">T obj = new T(); <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                  <div>{'}'}</div>
                  <div className="mt-2 text-blue-600">{'// –†—ñ—à–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞—Ç–∏ Class<T>'}</div>
                  <div>public &lt;T&gt; T create(Class&lt;T&gt; clazz) {'{'}</div>
                  <div className="ml-4">return clazz.newInstance();</div>
                  <div>{'}'}</div>
                </code>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-bold text-gray-800 mb-2">4. –ù–µ –º–æ–∂–Ω–∞ –º–∞—Ç–∏ static –ø–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø—É</h5>
              <div className="bg-gray-50 p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>public class Box&lt;T&gt; {'{'}</div>
                  <div className="ml-4">private static T value; <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                  <div>{'}'}</div>
                </code>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-bold text-gray-800 mb-2">5. –ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ç–∏–ø—É</h5>
              <div className="bg-gray-50 p-3 rounded font-mono text-sm">
                <code className="text-gray-800">
                  <div>public void print(List&lt;String&gt; list) {'{ }'}</div>
                  <div>public void print(List&lt;Integer&gt; list) {'{ }'} <span className="text-red-600">{'// –ü–æ–º–∏–ª–∫–∞!'}</span></div>
                  <div className="text-blue-600">{'// –ü—ñ—Å–ª—è Type Erasure –æ–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ'}</div>
                </code>
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "–ü—ñ–¥—Å—É–º–æ–∫: Generics",
      content: (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-lg">
            <h3 className="text-3xl font-bold mb-4">–ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ Generics</h3>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-green-50 p-5 rounded-lg border-l-4 border-green-500">
              <h4 className="font-bold text-green-700 mb-3 flex items-center gap-2">
                <CheckCircle size={20} />
                –ü–µ—Ä–µ–≤–∞–≥–∏
              </h4>
              <ul className="space-y-2 text-gray-700">
                <li>‚úì –¢–∏–ø–æ–±–µ–∑–ø–µ–∫–∞ –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó</li>
                <li>‚úì –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å casting</li>
                <li>‚úì –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–æ–¥</li>
                <li>‚úì –ö—Ä–∞—â–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å</li>
              </ul>
            </div>

            <div className="bg-blue-50 p-5 rounded-lg border-l-4 border-blue-500">
              <h4 className="font-bold text-blue-700 mb-3">–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó</h4>
              <ul className="space-y-2 text-gray-700 text-sm">
                <li>‚Ä¢ Generic –∫–ª–∞—Å–∏, –º–µ—Ç–æ–¥–∏, —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏</li>
                <li>‚Ä¢ Bounded types (&lt;T extends&gt;)</li>
                <li>‚Ä¢ Wildcards (?, extends, super)</li>
                <li>‚Ä¢ PECS –ø—Ä–∏–Ω—Ü–∏–ø</li>
              </ul>
            </div>
          </div>

          <div className="bg-yellow-50 p-5 rounded-lg border border-yellow-400">
            <h4 className="font-bold text-yellow-700 mb-3">–ü–∞–º'—è—Ç–∞–π—Ç–µ</h4>
            <ul className="space-y-2 text-gray-700">
              <li>üî∏ Type Erasure - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∏–ø–∏ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó</li>
              <li>üî∏ PECS: Producer Extends, Consumer Super</li>
              <li>üî∏ –ù–µ –º–æ–∂–Ω–∞: primitive types, –º–∞—Å–∏–≤–∏ generic —Ç–∏–ø—ñ–≤, static –ø–æ–ª—è</li>
              <li>üî∏ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ bounded types –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤</li>
            </ul>
          </div>

          <div className="bg-purple-50 p-5 rounded-lg">
            <h4 className="font-bold text-purple-700 mb-3">–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏</h4>
            <div className="grid grid-cols-2 gap-3 text-sm text-gray-700">
              <div>‚úì –ö–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö</div>
              <div>‚úì Utility –∫–ª–∞—Å–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏</div>
              <div>‚úì Repositories —Ç–∞ DAO</div>
              <div>‚úì Builder patterns</div>
            </div>
          </div>

          <div className="text-center bg-blue-100 p-4 rounded-lg">
            <p className="text-lg font-semibold text-blue-800">
              Generics - –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è Collections Framework! üöÄ
            </p>
          </div>
        </div>
      )
    }
  ];

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="bg-white rounded-2xl shadow-2xl p-12 min-h-[700px] flex flex-col">
          <div className="mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">{slides[currentSlide].title}</h1>
            {slides[currentSlide].subtitle && (
              <p className="text-lg text-gray-600">{slides[currentSlide].subtitle}</p>
            )}
            <div className="h-1 w-32 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded mt-3"></div>
          </div>

          <div className="flex-grow overflow-y-auto">
            {slides[currentSlide].content}
          </div>

          <div className="flex justify-between items-center mt-8 pt-6 border-t">
            <button
              onClick={prevSlide}
              disabled={currentSlide === 0}
              className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600 disabled:from-gray-300 disabled:to-gray-300 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl"
            >
              <ChevronLeft size={20} />
              –ù–∞–∑–∞–¥
            </button>

            <div className="flex gap-2">
              {slides.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentSlide(index)}
                  className={`h-3 rounded-full transition-all ${
                    index === currentSlide
                      ? 'bg-gradient-to-r from-blue-500 to-purple-500 w-8'
                      : 'bg-gray-300 hover:bg-gray-400 w-3'
                  }`}
                  title={`–°–ª–∞–π–¥ ${index + 1}`}
                />
              ))}
            </div>

            <button
              onClick={nextSlide}
              disabled={currentSlide === slides.length - 1}
              className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600 disabled:from-gray-300 disabled:to-gray-300 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl"
            >
              –í–ø–µ—Ä–µ–¥
              <ChevronRight size={20} />
            </button>
          </div>

          <div className="text-center mt-4 text-sm text-gray-500">
            –°–ª–∞–π–¥ {currentSlide + 1} –∑ {slides.length}
          </div>
        </div>
      </div>
    </div>
  );
};

export default GenericsPresentation;